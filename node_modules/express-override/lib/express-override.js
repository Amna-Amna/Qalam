var path = require('path')
,   APP_ROOT = path.dirname(process.argv[1]) || path.normalize(__dirname + "/../../..")
,   utils = require('./utils');

var EOR = module.exports = function(app){
  this.app = app;
  this.utils = utils;
  this.APP_ROOT = APP_ROOT;

  this._exit = false;
}

EOR.prototype.setRoutes = function(arr) {
  var self = this;
  if(Array.isArray(arr)){
    var classes = {};
    arr.forEach(function(route){
      for(var method in route){
        (function(r){
          if(Array.isArray(r)) for(var i=0; i<r.length; i++) arguments.callee(r[i]);
          if(typeof r == "string"){
            var handlerName = ""
            ,   functionName = ""
            ,   cl = "";
            
            r = r.indexOf(".")==-1 ? r + ".index" : r;
            handlerName = r.split('.')[0];
            functionName = r.split('.')[1];

            //cl = handlerName in classes ? classes[handlerName] : classes[handlerName] = new ( (require(APP_ROOT + "/handlers/" + handlerName + "Handler")).call(null, self) )();
            var handler_caller = function(req, res, next){
              var handler = self.define(handlerName);
              handler = new handler(req, res, next);

              if(self._exit === false)
                handler[functionName](req, res, next);
              else
                self._exit = false;
            }

            self.app[method].call(self.app, route[method][0], handler_caller);

          }else if(typeof r == "function"){
            self.app[method].call(route[method][0], r);
          }

        })(route[method][1]);
      }
    })
  }
}

EOR.prototype.exit = function() {
  this._exit = true;
};


EOR.prototype.define = function(className, type){
  var type = type || "Handler"
  ,   dirPath = type=="Handler" ? "/handlers/" : "/models/";

  if(className) {
    className = className + type;
    return (require(APP_ROOT + dirPath + className)).call(null, this);
  }else{
    return klass();
  }
}

EOR.prototype.getModule = function(className, type){
  var targetClass = this.define(className, type);
  return new targetClass();
}

EOR.prototype.shared = {};

